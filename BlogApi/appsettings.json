{
  "ConnectionStrings": {
    "default": "Server=localhost;Database=shanyue;Trusted_Connection=True;TrustServerCertificate=True;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      //"Microsoft.AspNetCore": "Warning",
      "Microsoft.Hosting.Lifetime": "Information",
      "Microsoft.Hosting.Mvc": "Warning",
      "Microsoft.Hosting.Routing": "Warning",
      //"EntityFrameworkCore": "Warning",
      "Microsoft.EntityFrameworkCore.Database.Command": "Error" //efcore sql日志
    }
  },
  "Redis": "localhost:6379",
  //serilog配置
  "Serilog": {
    //使用的 Sink 库
    "Using": [ "Serilog.Sinks.Console", "Serilog.Sinks.File" ],
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Microsoft": "Warning",
        "Microsoft.Hosting.Lifetime": "Information",
        "Microsoft.AspNetCore.Mvc": "Warning",
        "Microsoft.AspNetCore.Routing": "Warning",
        //efcore 控制台日志在这里配置成Infomation
        "Microsoft.EntityFrameworkCore.Database.Command": "Error"
      }
    },
    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          //{Level:u3}: 大写缩写3个字母,Info → INF
          //{Message:lj}: 日志内容(Message)和lj(literal + JSON safe保留原始文本格式(不会自动加引号))
          //{NewLine}: 每条日志独占一行
          //{Exception}: 如果日志里有异常对象，会输出异常堆栈、如果没有异常，则不显示
          "outputTemplate": "[{Timestamp:yyyy-MM-dd HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}"
        }
      },
      {
        "Name": "File",
        "Args": {
          "path": "Logs/warning/log-.txt",
          "rollingInterval": "Day",
          "restrictedToMinimumLevel": "Warning",
          "retainedFileCountLimit": 30
        }
      },
      {
        "Name": "File",
        "Args": {
          "path": "Logs/error/log-.txt",
          "rollingInterval": "Day",
          "restrictedToMinimumLevel": "Error",
          //保留最近 30 天日志
          "retainedFileCountLimit": 30
        }
      }
    ]
  },
  "AllowedHosts": "*",
  "JwtConfig": {
    //"SecretKey": "mysupersecret_secretkey!1234567890", //密钥长度需要32位
    "AccessToken": {
      "SecretKey": "mysupersecret_secretkey!1234567890",
      "Issuer": "dk",
      "Audience": "dk"
    },
    //如果使用jwt生成token就配置 否则二无所谓, 我这里暂时没有使用
    "RefreshToken": {
      "SecretKey": "mysupersecret_secretkey!9012345678",
      "Issuer": "blog_admin",
      "Audience": "blog_admin"
    }
  }
}
