// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShanYue.Context;

#nullable disable

namespace ShanYue.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20250825114312_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShanYueBlog.Model.Article", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ShanYueBlog.Model.AuthorizeModel.RolePermissionTable", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionTable");

                    b.HasData(
                        new
                        {
                            Id = 1914008443666445L,
                            PermissionId = 1914008443666437L,
                            RoleId = 1914008443666434L
                        },
                        new
                        {
                            Id = 1914008443666446L,
                            PermissionId = 1914008443666438L,
                            RoleId = 1914008443666434L
                        },
                        new
                        {
                            Id = 1914008443666447L,
                            PermissionId = 1914008443666439L,
                            RoleId = 1914008443666434L
                        },
                        new
                        {
                            Id = 1914008443666448L,
                            PermissionId = 1914008443666440L,
                            RoleId = 1914008443666434L
                        },
                        new
                        {
                            Id = 1914008443666449L,
                            PermissionId = 1914008443666441L,
                            RoleId = 1914008443666434L
                        },
                        new
                        {
                            Id = 1914008443666450L,
                            PermissionId = 1914008443666437L,
                            RoleId = 1914008443666435L
                        },
                        new
                        {
                            Id = 1914008443666451L,
                            PermissionId = 1914008443666438L,
                            RoleId = 1914008443666435L
                        },
                        new
                        {
                            Id = 1914008443666452L,
                            PermissionId = 1914008443666440L,
                            RoleId = 1914008443666435L
                        },
                        new
                        {
                            Id = 1914008443666453L,
                            PermissionId = 1914008443666441L,
                            RoleId = 1914008443666435L
                        },
                        new
                        {
                            Id = 1914008443666454L,
                            PermissionId = 1914008443666440L,
                            RoleId = 1914008443666436L
                        });
                });

            modelBuilder.Entity("ShanYueBlog.Model.AuthorizeModel.UserRoleTable", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleTable");

                    b.HasData(
                        new
                        {
                            Id = 1914008443666442L,
                            RoleId = 1914008443666434L,
                            UserId = 1914008443666432L
                        },
                        new
                        {
                            Id = 1914008443666443L,
                            RoleId = 1914008443666435L,
                            UserId = 1914008443666433L
                        },
                        new
                        {
                            Id = 1914008443666444L,
                            RoleId = 1914008443666435L,
                            UserId = 1914008443666432L
                        });
                });

            modelBuilder.Entity("ShanYueBlog.Model.Permission", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1914008443666437L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(97),
                            Description = "",
                            Name = "文章添加",
                            UpdateDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(98),
                            Url = "api/article/add"
                        },
                        new
                        {
                            Id = 1914008443666438L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(102),
                            Description = "",
                            Name = "文章删除",
                            UpdateDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(102),
                            Url = "api/article/delete"
                        },
                        new
                        {
                            Id = 1914008443666439L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(103),
                            Description = "",
                            Name = "文章修改",
                            UpdateDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(104),
                            Url = "api/article/update"
                        },
                        new
                        {
                            Id = 1914008443666440L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(105),
                            Description = "",
                            Name = "文章详情",
                            UpdateDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(105),
                            Url = "api/article/GetDetail"
                        },
                        new
                        {
                            Id = 1914008443666441L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(106),
                            Description = "",
                            Name = "文章列表",
                            UpdateDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(106),
                            Url = "api/article/Get"
                        });
                });

            modelBuilder.Entity("ShanYueBlog.Model.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1914008443666434L,
                            CreatedDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(91),
                            Description = "",
                            Name = "管理员",
                            UpdateDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(91)
                        },
                        new
                        {
                            Id = 1914008443666435L,
                            CreatedDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(95),
                            Description = "",
                            Name = "普通用户",
                            UpdateDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(95)
                        },
                        new
                        {
                            Id = 1914008443666436L,
                            CreatedDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(96),
                            Description = "",
                            Name = "游客",
                            UpdateDate = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(96)
                        });
                });

            modelBuilder.Entity("ShanYueBlog.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1914008443666432L,
                            CreateTime = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(68),
                            Email = "mountainmono@gmail.com",
                            Name = "dk",
                            NickName = "shanyue",
                            Password = "123456",
                            UpdateTime = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(79)
                        },
                        new
                        {
                            Id = 1914008443666433L,
                            CreateTime = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(89),
                            Email = "1906525910@gmail.com",
                            Name = "kd",
                            NickName = "xuecun",
                            Password = "123456",
                            UpdateTime = new DateTime(2025, 8, 25, 19, 43, 12, 349, DateTimeKind.Local).AddTicks(90)
                        });
                });

            modelBuilder.Entity("ShanYueBlog.Model.WeatherForecast", b =>
                {
                    b.Property<long>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DateId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("int");

                    b.HasKey("DateId");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("ShanYueBlog.Model.AuthorizeModel.RolePermissionTable", b =>
                {
                    b.HasOne("ShanYueBlog.Model.Permission", "permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShanYueBlog.Model.Role", "role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("ShanYueBlog.Model.AuthorizeModel.UserRoleTable", b =>
                {
                    b.HasOne("ShanYueBlog.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShanYueBlog.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShanYueBlog.Model.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ShanYueBlog.Model.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ShanYueBlog.Model.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
