// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShanYue.Context;

#nullable disable

namespace ShanYue.Migrations
{
    [DbContext(typeof(BlogContext))]
    partial class BlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShanYueBlog.Model.Article", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ShanYueBlog.Model.AuthorizeModel.RolePermissionTable", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionTable");

                    b.HasData(
                        new
                        {
                            Id = 1914066240733197L,
                            PermissionId = 1914066240733189L,
                            RoleId = 1914066240733186L
                        },
                        new
                        {
                            Id = 1914066240733198L,
                            PermissionId = 1914066240733190L,
                            RoleId = 1914066240733186L
                        },
                        new
                        {
                            Id = 1914066240733199L,
                            PermissionId = 1914066240733191L,
                            RoleId = 1914066240733186L
                        },
                        new
                        {
                            Id = 1914066240733200L,
                            PermissionId = 1914066240733192L,
                            RoleId = 1914066240733186L
                        },
                        new
                        {
                            Id = 1914066240733201L,
                            PermissionId = 1914066240733193L,
                            RoleId = 1914066240733186L
                        },
                        new
                        {
                            Id = 1914066240733202L,
                            PermissionId = 1914066240733189L,
                            RoleId = 1914066240733187L
                        },
                        new
                        {
                            Id = 1914066240733203L,
                            PermissionId = 1914066240733190L,
                            RoleId = 1914066240733187L
                        },
                        new
                        {
                            Id = 1914066240733204L,
                            PermissionId = 1914066240733192L,
                            RoleId = 1914066240733187L
                        },
                        new
                        {
                            Id = 1914066240733205L,
                            PermissionId = 1914066240733193L,
                            RoleId = 1914066240733187L
                        },
                        new
                        {
                            Id = 1914066240733206L,
                            PermissionId = 1914066240733192L,
                            RoleId = 1914066240733188L
                        });
                });

            modelBuilder.Entity("ShanYueBlog.Model.AuthorizeModel.UserRoleTable", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleTable");

                    b.HasData(
                        new
                        {
                            Id = 1914066240733194L,
                            RoleId = 1914066240733186L,
                            UserId = 1914066240733184L
                        },
                        new
                        {
                            Id = 1914066240733195L,
                            RoleId = 1914066240733187L,
                            UserId = 1914066240733185L
                        },
                        new
                        {
                            Id = 1914066240733196L,
                            RoleId = 1914066240733187L,
                            UserId = 1914066240733184L
                        });
                });

            modelBuilder.Entity("ShanYueBlog.Model.Permission", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1914066240733189L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8189),
                            Description = "",
                            Name = "文章添加",
                            UpdateDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8190),
                            Url = "api/article/add"
                        },
                        new
                        {
                            Id = 1914066240733190L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8193),
                            Description = "",
                            Name = "文章删除",
                            UpdateDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8194),
                            Url = "api/article/delete"
                        },
                        new
                        {
                            Id = 1914066240733191L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8195),
                            Description = "",
                            Name = "文章修改",
                            UpdateDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8196),
                            Url = "api/article/update"
                        },
                        new
                        {
                            Id = 1914066240733192L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8197),
                            Description = "",
                            Name = "文章详情",
                            UpdateDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8197),
                            Url = "api/article/GetDetail"
                        },
                        new
                        {
                            Id = 1914066240733193L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8198),
                            Description = "",
                            Name = "文章列表",
                            UpdateDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8199),
                            Url = "api/article/Get"
                        });
                });

            modelBuilder.Entity("ShanYueBlog.Model.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1914066240733186L,
                            CreatedDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8181),
                            Description = "",
                            Name = "管理员",
                            UpdateDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8182)
                        },
                        new
                        {
                            Id = 1914066240733187L,
                            CreatedDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8185),
                            Description = "",
                            Name = "普通用户",
                            UpdateDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8186)
                        },
                        new
                        {
                            Id = 1914066240733188L,
                            CreatedDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8187),
                            Description = "",
                            Name = "游客",
                            UpdateDate = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8188)
                        });
                });

            modelBuilder.Entity("ShanYueBlog.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1914066240733184L,
                            Account = "shanyue",
                            CreateTime = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8143),
                            Email = "mountainmono@gmail.com",
                            Name = "dk",
                            NickName = "山月",
                            Password = "123456",
                            UpdateTime = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8155)
                        },
                        new
                        {
                            Id = 1914066240733185L,
                            Account = "xuecun",
                            CreateTime = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8161),
                            Email = "1906525910@gmail.com",
                            Name = "kd",
                            NickName = "雪村",
                            Password = "123456",
                            UpdateTime = new DateTime(2025, 8, 25, 23, 38, 22, 961, DateTimeKind.Local).AddTicks(8162)
                        });
                });

            modelBuilder.Entity("ShanYueBlog.Model.WeatherForecast", b =>
                {
                    b.Property<long>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DateId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("int");

                    b.HasKey("DateId");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("ShanYueBlog.Model.AuthorizeModel.RolePermissionTable", b =>
                {
                    b.HasOne("ShanYueBlog.Model.Permission", "permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShanYueBlog.Model.Role", "role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("ShanYueBlog.Model.AuthorizeModel.UserRoleTable", b =>
                {
                    b.HasOne("ShanYueBlog.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShanYueBlog.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShanYueBlog.Model.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ShanYueBlog.Model.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ShanYueBlog.Model.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
