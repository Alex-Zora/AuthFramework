// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShanYue.Context;

#nullable disable

namespace ShanYue.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20250902165605_update_module_table")]
    partial class update_module_table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Model.Basicparameter", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Basicparameters");
                });

            modelBuilder.Entity("ShanYue.Model.Article", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ShanYue.Model.Module", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("CreateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Func")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IconNew")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsButton")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHide")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsKeepAlive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderSort")
                        .HasColumnType("int");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("UpdateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = 0L,
                            Code = "",
                            CreateBy = "",
                            CreateTime = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2418),
                            Description = "",
                            Enabled = false,
                            Func = "",
                            Icon = "",
                            IconNew = "",
                            IsButton = false,
                            IsHide = false,
                            IsKeepAlive = false,
                            OrderSort = 0,
                            ParentId = 0L,
                            PermissionId = 0L,
                            UpdateBy = "",
                            UpdateTime = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2419)
                        });
                });

            modelBuilder.Entity("ShanYue.Model.Permission", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1916916492496901L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2408),
                            Description = "",
                            Name = "文章添加",
                            UpdateDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2408),
                            Url = "/api/article/add",
                            type = 0
                        },
                        new
                        {
                            Id = 1916916492496902L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2413),
                            Description = "",
                            Name = "文章删除",
                            UpdateDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2413),
                            Url = "/api/article/delete",
                            type = 0
                        },
                        new
                        {
                            Id = 1916916492496903L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2414),
                            Description = "",
                            Name = "文章修改",
                            UpdateDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2414),
                            Url = "/api/article/update",
                            type = 0
                        },
                        new
                        {
                            Id = 1916916492496904L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2415),
                            Description = "",
                            Name = "文章详情",
                            UpdateDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2415),
                            Url = "/api/article/GetDetail",
                            type = 0
                        },
                        new
                        {
                            Id = 1916916492496905L,
                            Code = "",
                            CreatedDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2416),
                            Description = "",
                            Name = "文章列表",
                            UpdateDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2416),
                            Url = "/api/article/Get",
                            type = 0
                        });
                });

            modelBuilder.Entity("ShanYue.Model.Role", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1916916492496898L,
                            CreatedDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2399),
                            Description = "",
                            Name = "管理员",
                            UpdateDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2399)
                        },
                        new
                        {
                            Id = 1916916492496899L,
                            CreatedDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2405),
                            Description = "",
                            Name = "普通用户",
                            UpdateDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2405)
                        },
                        new
                        {
                            Id = 1916916492496900L,
                            CreatedDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2406),
                            Description = "",
                            Name = "游客",
                            UpdateDate = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2407)
                        });
                });

            modelBuilder.Entity("ShanYue.Model.RolePermissionTable", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("testFiles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionTable");

                    b.HasData(
                        new
                        {
                            Id = 1916916492496909L,
                            PermissionId = 1916916492496901L,
                            RoleId = 1916916492496898L,
                            testFiles = ""
                        },
                        new
                        {
                            Id = 1916916492496910L,
                            PermissionId = 1916916492496902L,
                            RoleId = 1916916492496898L,
                            testFiles = ""
                        },
                        new
                        {
                            Id = 1916916492496911L,
                            PermissionId = 1916916492496903L,
                            RoleId = 1916916492496898L,
                            testFiles = ""
                        },
                        new
                        {
                            Id = 1916916492496912L,
                            PermissionId = 1916916492496904L,
                            RoleId = 1916916492496898L,
                            testFiles = ""
                        },
                        new
                        {
                            Id = 1916916492496913L,
                            PermissionId = 1916916492496905L,
                            RoleId = 1916916492496898L,
                            testFiles = ""
                        },
                        new
                        {
                            Id = 1916916492496914L,
                            PermissionId = 1916916492496901L,
                            RoleId = 1916916492496899L,
                            testFiles = ""
                        },
                        new
                        {
                            Id = 1916916492496915L,
                            PermissionId = 1916916492496902L,
                            RoleId = 1916916492496899L,
                            testFiles = ""
                        },
                        new
                        {
                            Id = 1916916492496916L,
                            PermissionId = 1916916492496904L,
                            RoleId = 1916916492496899L,
                            testFiles = ""
                        },
                        new
                        {
                            Id = 1916916492496917L,
                            PermissionId = 1916916492496905L,
                            RoleId = 1916916492496899L,
                            testFiles = ""
                        },
                        new
                        {
                            Id = 1916916492496918L,
                            PermissionId = 1916916492496904L,
                            RoleId = 1916916492496900L,
                            testFiles = ""
                        });
                });

            modelBuilder.Entity("ShanYue.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("TokenVersion")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Account")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1916916492496896L,
                            Account = "shanyue",
                            CreateTime = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2379),
                            Email = "mountainmono@gmail.com",
                            Name = "dk",
                            NickName = "山月",
                            Password = "123456",
                            PasswordSalt = "",
                            TokenVersion = 0,
                            UpdateTime = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2390)
                        },
                        new
                        {
                            Id = 1916916492496897L,
                            Account = "xuecun",
                            CreateTime = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2397),
                            Email = "1906525910@gmail.com",
                            Name = "kd",
                            NickName = "雪村",
                            Password = "123456",
                            PasswordSalt = "",
                            TokenVersion = 0,
                            UpdateTime = new DateTime(2025, 9, 3, 0, 56, 5, 208, DateTimeKind.Local).AddTicks(2397)
                        });
                });

            modelBuilder.Entity("ShanYue.Model.UserRoleTable", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleTable");

                    b.HasData(
                        new
                        {
                            Id = 1916916492496906L,
                            RoleId = 1916916492496898L,
                            UserId = 1916916492496896L
                        },
                        new
                        {
                            Id = 1916916492496907L,
                            RoleId = 1916916492496899L,
                            UserId = 1916916492496897L
                        },
                        new
                        {
                            Id = 1916916492496908L,
                            RoleId = 1916916492496899L,
                            UserId = 1916916492496896L
                        });
                });

            modelBuilder.Entity("ShanYue.Model.WeatherForecast", b =>
                {
                    b.Property<long>("DateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DateId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("int");

                    b.HasKey("DateId");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("ShanYue.Model.RolePermissionTable", b =>
                {
                    b.HasOne("ShanYue.Model.Module", "module")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ModuleId");

                    b.HasOne("ShanYue.Model.Permission", "permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId");

                    b.HasOne("ShanYue.Model.Role", "role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("module");

                    b.Navigation("permission");

                    b.Navigation("role");
                });

            modelBuilder.Entity("ShanYue.Model.UserRoleTable", b =>
                {
                    b.HasOne("ShanYue.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShanYue.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShanYue.Model.Module", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ShanYue.Model.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ShanYue.Model.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ShanYue.Model.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
